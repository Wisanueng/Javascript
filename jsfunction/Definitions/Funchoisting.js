// Function Hoisting (การย้ายฟังก์ชันขึ้น)

// Function Hoisting ใน JavaScript หมายถึงพฤติกรรมที่ตัวแปล (JavaScript interpreter) 
// จะย้ายการประกาศฟังก์ชันไปไว้ด้านบนสุดของขอบเขต (scope) ก่อนที่จะทำการรันโค้ดจริง ๆ

// Example
        myFunction(5); // ✅ สามารถเรียกใช้ได้แม้ฟังก์ชันจะถูกประกาศทีหลัง

        function myFunction(y) {
            return y * y;
        }
        
console.log("=================================================================================================");

// เขียนโค้ดที่เรียกใช้ฟังก์ชัน addNumbers ก่อนที่จะประกาศฟังก์ชัน แล้วตรวจสอบผลลัพธ์

            addNumbers(3,4);

            function addNumbers(num1,num2){
                return console.log(num1 + num2);
            }

console.log("=================================================================================================");

// สร้างฟังก์ชัน sayHello(name) ที่รับชื่อเป็นพารามิเตอร์และแสดงข้อความ "Hello, [name]" หลังจากนั้นเรียกใช้ฟังก์ชันก่อนการประกาศ
            sayHello("zero two");

            function sayHello(name){
                return console.log(`hello ${name}`);
            }

console.log("=================================================================================================");

// เขียนโค้ดที่ประกาศฟังก์ชัน multiply(a, b) หลังจากที่เรียกใช้มัน แล้วตรวจสอบว่ามันทำงานได้
            multiply(2,2);

            function multiply(a,b){
                return console.log(a * b);
            }

console.log("=================================================================================================");

// สร้างฟังก์ชัน subtract(a, b) และทดสอบการเรียกใช้ฟังก์ชันก่อนการประกาศ

            subtract(5,4);

            function subtract(a,b){
                return console.log(a - b);
            }

console.log("=================================================================================================");

//เขียนฟังก์ชัน square(num) และทดสอบการเรียกใช้ก่อนประกาศ ฟังก์ชันควรคืนค่ากำลังสองของตัวเลข

            square(5);

            function square(num){
                return console.log(num ** 2);
            }


console.log("=================================================================================================");


/// Gpt แนะนำว่าควร return ค่า เป็นค่าออกไปเลย ไม่ควรเป็น return console.log(); เพราะจะนำค่าไปใช้ต่อไม่ได้
