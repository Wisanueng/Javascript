// Functions are Objects 
// ใน JavaScript ฟังก์ชันเป็น "Object ชนิดหนึ่ง"
// แม้ว่า typeof myFunction จะคืนค่า "function" แต่จริง ๆ แล้ว ฟังก์ชันใน JavaScript เป็น Object 
// ที่สามารถมี property (คุณสมบัติ) และ method (เมธอด) ได้


// โจทย์:

console.log("=================================================================================================");

// ใช้ toString() เพื่อแปลงฟังก์ชันเป็นสตริงแล้วแสดงผล

        function myStr () {
            return "Hello World";
        };

        console.log(myStr.toString); // ถ้าเขียนแบบนี้ toString เป็นฟังก์ชันจริงๆ ซึ่งถูกอ้างอิงใน log แต่ไม่ได้ถูกเรียก

        console.log(myStr.toString()); // ต้องเขียนแบบนี้

console.log("=================================================================================================");

// สร้างฟังก์ชันที่รับพารามิเตอร์และใช้ arguments เพื่อแสดงค่าในอาร์กิวเมนต์ทั้งหมด

        function showArgument (ar1,ar2,ar3,ar4) {
            return arguments;
        };

        console.log(showArgument(1,2,3));  // output [Arguments] { '0': 1, '1': 2, '2': 3 }

console.log("=================================================================================================");

// เขียนฟังก์ชันที่มีการใช้ arguments.length เพื่อหาจำนวนอาร์กิวเมนต์ที่ถูกส่ง

        function checkParams(a, b) {
            console.log("พารามิเตอร์ที่ฟังก์ชันมี:", checkParams.length);
            console.log("จำนวนค่าที่ถูกส่งเข้ามา:", arguments.length);
        }

        checkParams(10);        // Output: พารามิเตอร์ที่มี: 2 | จำนวนค่าที่ถูกส่ง: 1
        checkParams(10, 20);    // Output: พารามิเตอร์ที่มี: 2 | จำนวนค่าที่ถูกส่ง: 2
        checkParams(10, 20, 30); // Output: พารามิเตอร์ที่มี: 2 | จำนวนค่าที่ถูกส่ง: 3


console.log("=================================================================================================");

// เขียนฟังก์ชันที่มีพารามิเตอร์สองตัวและใช้ arguments.length เพื่อแสดงจำนวนพารามิเตอร์ที่ถูกส่งเข้ามา

        function myFunc (ar1,ar2) {
            return arguments.length; //arguments.length คืนค่าเป็นจำนวนพารามิเตอร์ที่ถูกส่งมาตอนเรียกฟังก์ชัน
        }

        console.log(myFunc(3,3)); // ส่งมาสองค่า ผลลัพธ์ควรเป็น 2
        console.log(myFunc(3)); // ส่งมาหนึ่งค่า ผลลัพธ์ควรเป็น 1

console.log("=================================================================================================");

//  arguments ใช้ได้ แต่ควรทราบว่ามันเก่าแล้ว
// ปัจจุบัน arguments ถูกแทนที่ด้วย Rest Parameters (...args)
// arguments ยังทำงานได้ แต่ควรรู้ว่า arguments ไม่มีใน Arrow Function



